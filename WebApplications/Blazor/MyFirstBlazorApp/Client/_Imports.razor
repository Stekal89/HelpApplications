@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.JSInterop
@using MyFirstBlazorApp.Client
@using MyFirstBlazorApp.Client.Shared


@*
    Specifying a default layout for the app
    The most generic way to specify a layout is to edit the/Pages/_Imports.razor file and edit the single line of code to identify a different layout.

    @layout MainLayout

    The name of the layout is strongly typed. Blazor will only syntax-highlight the code correctly if it there is a layout with the name specified, 
    the compiler will also fail if the identifier is incorrect.

    Note: Obviously you can alter the /Shared/MainLayout.razor file if you just wish to alter the appearance of the existing layout.
*@

@*@layout MainLayout*@

@*
    If your app has separate areas to it, for example an “Admin” area, it is possible to specify a default layout to use for all pages within that area 
    simply by grouping them within their own child-folder that has its own _Imports.razor file.
*@


@*
    Components:


    <MyFirstBlazorApp.Client.Components.MyFirstComponent />


    Or edit /_Imports.razor and add "@using MyFirstBlazorApp.Client.Components".
    The using statements here are cascaded into all Razor views – which means the mark-up
    to use the new component in /Pages/Index.razor no longer needs a namespace.
*@

@using MyFirstBlazorApp.Client.Components