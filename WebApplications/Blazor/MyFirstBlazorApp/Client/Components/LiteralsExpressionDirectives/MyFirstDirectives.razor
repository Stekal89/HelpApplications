@page "/MyFirstDirectives"

@*
    Directives 1

    Directives are built-in macros that alter the transpiled C# code that is generated from Razor mark-up. Directives are used by preceding the identifier with the @ symbol, 
    the identifier being what we'd typically expect to be either the name of an HTML attribute or the name of a component's property. If you haven't done so already, 
    read Literals, expressions, and directives.

    Note: Currently, unlike other frameworks such as Angular, Blazor does not allow developers to create their own directives.

    Because the type of the value assigned to the directive is known (it is strongly typed in C# code) the value will be inferred to be an expression.
    So, as with component properties, adding the @ at the start of assigned value is unnecessary unless we wish to pass an expression to a directive that expects a string value.
    An exception to this is when we wish to pass a lambda; lambdas must be escaped with an @ symbol and enclosed with brackets.

    @onclick=@( args => Debug.WriteLine("Clicked") )

*@

<h3>MyFirstDirectives</h3>

@*// Razor mark-up with @ref directive*@
@*Defines an H1 element with the @onclick directive.*@
<h1 @onclick=H1Clicked>Hello, world!</h1>

@code
{
    public void H1Clicked(MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("H1 clicked");
        System.Diagnostics.Debugger.Break();
    }
}

@*
// Transpiled C#
public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
{
  protected override void BuildRenderTree(RenderTreeBuilder __builder)
  {
    __builder.OpenElement(0, "h1");

    // Shows how the @onclick=H1Clicked directive is transpiled so that the DOM onclick event is set on the rendered element.
    __builder.AddAttribute(1, "onclick", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, H1Clicked));
    __builder.AddContent(2, "Hello, world!");
    __builder.CloseElement();
  }
}
*@


@*
    Some standard directives applicable to the Razor file itself are:

    @code
        This directive identifies a block of C# code that should be output as-is into the resulting C# file. It is possible to have multiple @code directives in a single 
        Razor mark-up file; Blazor will collate these to a single block of C# code in the transpiled file.

    @page
        This directive generates a [RouteAttribute] on the transpiled class ([PageAttribute] in Blazor 3) , enabling Blazor routing (covered later) to identify which 
        component (page) to render given a specific address in the URL.

    @layout
        Generates a [LayoutAttribute] on the transpiled class. Blazor uses this to determine which Layout to use (if any) to wrap the contents of a page.
    
    @typeparam
        Instructs Blazor to generate a generic class from the Razor mark-up.

    @inject
        Allows components to specify dependencies they require to be injected by Blazor when it creates a new instance of the component.

    @attribute
        Adds the specified DotNet attribute to the generated C# class.
        
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    The following is a small set of examples of directives that can be applied to components and HTML elements that the current Razor file is consuming. 
    For example <h1 @ref=MyH1Element>Hello</h1>.

    @ref
        Identifies a member or property of the current component that should hold a reference to an HTML element or component that will be rendered. These can be used as references
        when using JavaScript Interop, or to obtain a reference to an embedded Blazor component so that we can invoke methods on it.

    @bind
        Allows us to data bind (Two way binding) to the property of a component being consumed, or the attribute of an HTML element.

    @attributes
        Outputs name-value pairs as HTML attributes.

    @key
        Gives us the ability to give elements/components a unique identifier, which helps keep change deltas small when rendering to HTML.
    
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    And the following is a subset of HTML DOM element events that are available. These will be covered in more detail in Component events.
        @onmousemove
        @onclick
        @onkeypress
        @onscroll
*@