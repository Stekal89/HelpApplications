@*
<!--
    #################
    ### Example 1 ###
    ### Step 2    ###
    #################

    ### Subscribing to EventCallback ###
    
    Edit the /Pages/Index.razor page so that we embed the Counter component and subscribe to its OnMultipleOfThree event. Change its mark-up to the following.
-->

@page "/"

<!-- Displays the value of LastMultipleOfThree -->
Last multiple of three = @LastMultipleOfThree

<!-- Embeds the Counter component and sets its OnMultipleOfThree event to execute the UpdateLastMultipleOfThreeValue method when the event is emitted. -->
<Counter OnMultipleOfThree=@UpdateLastMultipleOfThreeValue />

@code
{
    // Declares a class member of type int that stores the last multiple of 3 value.
    int LastMultipleOfThree = 0;

    // The value received from the event is used to update the value of LastMultipleOfThree.
    private void UpdateLastMultipleOfThreeValue(int value)
    {
        LastMultipleOfThree = value;
    }
}
*@

@*
    ############
    ### Info ###
    ############

    ### Differences between EventCallback and .NET events ###

    Single-cast vs. Multi-cast

    The most notable difference is that EventCallback<T> is a single-cast event handler, whereas .NET events are multi-cast. Blazor EventCallback<T> is meant to be assigned a single value and can only 
    call back a single method.

    // Setting a Blazor EventCallback
    <MyComponent SomeEvent=@MyMethodToCall/>

    // Setting a .NET event
    MyComponent.SomeEvent += MyMethodToCall;

    // Unscrubscribing from the event
    MyComponent.SomeEvent -= MyMethodToCall;

    Class vs. Struct
    .NET events (delegates) are classes, whereas Blazor EventCallback<T> is a readonly struct. Unlike .NET delegates, EventCallback<T> cannot be null and therefore there is no need to do any null checking
    when emitting the event.

    // Invoking a .NET event
    MyNetEvent?.Invoke(this, someValue);

    // Invoking a CallbackEvent<T>
    MyEventCallback.InvokeAsync(someValue);
    Awaitable callbacks
    Standard .NET events are synchronous, whereas Blazor EventCallback<T> is asynchronous. As we can see in the previous example code, EventCallback<T>.InvokeAsync returns a Task that can be awaited.

    Razor mark-up compatibility
    It is not possible to decorate a standard .NET event with [Parameter] and have it settable via Razor mark-up, whereas with EventCallback<T> it is. This gives us the ability to express event callbacks in the view mark-up itself, which makes the developer's intentions easier to see.
*@

@*
    #################
    ### Example 2 ###
    ### Step 2    ###
    #################

    Automatic state change detection

    Now alter the Index component so that it sets a method to callback whenever the value is a multiple of two, and so it also stores and displays the last number received from OnMultipleOfTwoAction on 
    the consumed component.
*@

<!-- Now alter the Index component so that it sets a method to callback whenever the value is a multiple of two, and so it also stores and displays the last number received from OnMultipleOfTwoAction on the consumed component. -->

@page "/"

<ul>
    <!-- Displays the value of LastMultipleOfTwo in the user interface -->
    <li>Last multiple of two = @LastMultipleOfTwo</li>
    <li>Last multiple of three = @LastMultipleOfThree</li>
</ul>

<!-- Sets OnMultipleOfTwo on the consumed component so that our component is notified whenever the current value is a multiple of two -->
<Counter OnMultipleOfThree=@UpdateLastMultipleOfThreeValue OnMultipleOfTwoAction=@UpdateLastMultipleOfTwoValue />

@code
{
    // Defines a new member to store the most recent "multiple of two" value passed from the consumed component
    int LastMultipleOfTwo = 0;
    int LastMultipleOfThree = 0;

    private Task UpdateLastMultipleOfThreeValue(int value)
    {
        LastMultipleOfThree = value;
        return Task.CompletedTask;
    }

    private void UpdateLastMultipleOfTwoValue(int value)
    {
        // Records the last multiple of two that the consumed component has notified us of
        LastMultipleOfTwo = value;
    }
}

<!--
    When we run the application now and click the button a number of times, we'll see that when UpdateLastMultipleOfTwoValue is called back via Action<int> there is no update to the view, but when UpdateLastMultipleOfThreeValue is called back via EventCallback<int>
    on the next click the view us updated and the latest value of both are displayed.
-->

<!--
    ############
    ### Info ###
    ############

    ### Callee method signatures ###
    
    EventCallback<T> typically calls back a method with the signature private Task SomeName(T value) - where the exposure level of the method is unimportant. However, Blazor will allow us to set an EventCallback<T> to call back methods with a couple of variations.

    If our method does not perform any asynchronous operations, then the following implementation may start to become tedious:

    public Task SomethingHappenedInChildComponent(string value)
    {
      // Do something with value
      return Task.CompletedTask;
    }

    Because of this, Blazor will allow us to set `EventCallback<T>` to call back a method with a void return type.

    public void SomethingHappenedInChildComponent(string value)
    {
      // Do something with value
    }

    Sometimes we only want to know when an event occurs, and aren't interested in the value that was passed with it. Blazor will also call back a method that excludes the value parameter.

    // Either
    public void SomethingHappenedInChildComponent()
    {
      // Do something that doesn't need the value
    }

    // Or
    public Task SomethingHappenedInChildComponent()
    {
      // Do some asynchronous work that doesn't need the value
      return SomeTask;
    }
-->

<!--
    ############
    ### Info ###
    ############

    ### Browser DOM events ###
    Check out the link, or the Documentations\Browser_DOM_events.pdf document
    https://blazor-university.com/components/component-events/browser-dom-events/

-->